// Mocks generated by Mockito 5.0.7 from annotations
// in domain/test/data_repositories/movie_data_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:domain/data_repositories/movie_data_repository.dart' as _i3;
import 'package:domain/entities/movie.dart' as _i5;
import 'package:domain/entities/movie_detail.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeMovieDetail extends _i1.Fake implements _i2.MovieDetail {}

/// A class which mocks [MovieDataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDataRepository extends _i1.Mock
    implements _i3.MovieDataRepository {
  MockMovieDataRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Movie>> fetchMovieList() =>
      (super.noSuchMethod(Invocation.method(#fetchMovieList, []),
              returnValue: Future<List<_i5.Movie>>.value(<_i5.Movie>[]))
          as _i4.Future<List<_i5.Movie>>);
  @override
  _i4.Future<_i2.MovieDetail> fetchMovieDetail(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#fetchMovieDetail, [movieId]),
              returnValue: Future<_i2.MovieDetail>.value(_FakeMovieDetail()))
          as _i4.Future<_i2.MovieDetail>);
  @override
  _i4.Future<void> updateMovieFavorite(_i2.MovieDetail? movieDetail) => (super
      .noSuchMethod(Invocation.method(#updateMovieFavorite, [movieDetail]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addFavorite(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#addFavorite, [movieId]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> removeFavorite(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#removeFavorite, [movieId]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i5.Movie>> fetchMovieFavoriteList() =>
      (super.noSuchMethod(Invocation.method(#fetchMovieFavoriteList, []),
              returnValue: Future<List<_i5.Movie>>.value(<_i5.Movie>[]))
          as _i4.Future<List<_i5.Movie>>);
}
