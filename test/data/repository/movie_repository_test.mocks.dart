// Mocks generated by Mockito 5.4.1 from annotations
// in teste_tokenlab/test/data/repository/movie_repository_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:teste_tokenlab/data/cache/data_source/movie_cds.dart' as _i4;
import 'package:teste_tokenlab/data/cache/models/movie_cm.dart' as _i6;
import 'package:teste_tokenlab/data/cache/models/movie_detail_cm.dart' as _i7;
import 'package:teste_tokenlab/data/remote/data_source/movie_rds.dart' as _i8;
import 'package:teste_tokenlab/data/remote/models/movie_detail_rm.dart' as _i3;
import 'package:teste_tokenlab/data/remote/models/movie_rm.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailRm_1 extends _i1.SmartFake implements _i3.MovieDetailRm {
  _FakeMovieDetailRm_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieCds].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieCds extends _i1.Mock implements _i4.MovieCds {
  MockMovieCds() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> isMoviesBoxEmpty() => (super.noSuchMethod(
        Invocation.method(
          #isMoviesBoxEmpty,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> addAllMovies(List<_i6.MovieCm>? movieList) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAllMovies,
          [movieList],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i6.MovieCm>> fetchAllMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllMovies,
          [],
        ),
        returnValue: _i5.Future<List<_i6.MovieCm>>.value(<_i6.MovieCm>[]),
      ) as _i5.Future<List<_i6.MovieCm>>);
  @override
  _i5.Future<bool> isMovieInBox(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #isMovieInBox,
          [movieId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> addMovie(_i7.MovieDetailCm? movieDetail) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMovie,
          [movieDetail],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i7.MovieDetailCm?> fetchMovieDetail(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovieDetail,
          [movieId],
        ),
        returnValue: _i5.Future<_i7.MovieDetailCm?>.value(),
      ) as _i5.Future<_i7.MovieDetailCm?>);
  @override
  _i5.Future<void> addFavorite(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [movieId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> removeFavorite(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #removeFavorite,
          [movieId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<int>> fetchFavorites() => (super.noSuchMethod(
        Invocation.method(
          #fetchFavorites,
          [],
        ),
        returnValue: _i5.Future<List<int>>.value(<int>[]),
      ) as _i5.Future<List<int>>);
}

/// A class which mocks [MovieRds].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRds extends _i1.Mock implements _i8.MovieRds {
  MockMovieRds() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
  @override
  _i5.Future<List<_i9.MovieRm>> fetchMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchMovies,
          [],
        ),
        returnValue: _i5.Future<List<_i9.MovieRm>>.value(<_i9.MovieRm>[]),
      ) as _i5.Future<List<_i9.MovieRm>>);
  @override
  _i5.Future<_i3.MovieDetailRm> fetchMovieDetail(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovieDetail,
          [movieId],
        ),
        returnValue: _i5.Future<_i3.MovieDetailRm>.value(_FakeMovieDetailRm_1(
          this,
          Invocation.method(
            #fetchMovieDetail,
            [movieId],
          ),
        )),
      ) as _i5.Future<_i3.MovieDetailRm>);
}
